// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    /* two parts: determing load sig and addressing */ 

    /* determining load */ 
    DMux8Way(
      in=load, 
      sel=address[3..5],
      a=lr0,
      b=lr1, 
      c=lr2, 
      d=lr3,
      e=lr4, 
      f=lr5, 
      g=lr6, 
      h=lr7
    );

    /* let lower 3 bits determine addr */ 
    RAM8(in=in, load=lr0, out=r0, address=address[0..2]); 
    RAM8(in=in, load=lr1, out=r1, address=address[0..2]); 
    RAM8(in=in, load=lr2, out=r2, address=address[0..2]);  
    RAM8(in=in, load=lr3, out=r3, address=address[0..2]); 
    RAM8(in=in, load=lr4, out=r4, address=address[0..2]);
    RAM8(in=in, load=lr5, out=r5, address=address[0..2]); 
    RAM8(in=in, load=lr6, out=r6, address=address[0..2]); 
    RAM8(in=in, load=lr7, out=r7, address=address[0..2]); 

    /* set out to last load */ 
    Mux8Way16(
      a=r0, 
      b=r1, 
      c=r2, 
      d=r3, 
      e=r4, 
      f=r5, 
      g=r6, 
      h=r7,
      sel=address[3..5], 
      out=out
    );
}